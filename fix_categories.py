#!/usr/bin/env python3
"""
Fix category data for existing products by analyzing their URLs and patterns
"""
import asyncio
import sys
import re
from pathlib import Path
from typing import Optional

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from app.services.supabase_service import SupabaseService

class CategoryFixer:
    """Fix category information for products"""
    
    def __init__(self):
        self.supabase = SupabaseService()
        
        # Enhanced category mapping
        self.category_mapping = {
            'LIG': '‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü',
            'PAI': '‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏™‡∏µ', 
            'BAT': '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥',
            'PLU': '‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏õ‡∏≤',
            'KIT': '‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
            'SMA': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å',
            'HHP': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            'TVA': '‡∏ó‡∏µ‡∏ß‡∏µ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏Å‡∏°',
            'FLO': '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏õ‡∏π‡∏û‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏ô‡∏±‡∏á',
            'FUR': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
            'APP': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
            'CON': '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á',
            'ELT': '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
            'DOW': '‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á',
            'TOO': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå',
            'OUT': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏ô',
            'BED': '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≠‡∏ô',
            'SPO': '‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
            'BEA': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß',
            'MOM': '‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å',
            'HEA': '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
            'PET': '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á',
            'ATM': '‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå'
        }
        
        # Brand to category mapping for additional inference
        self.brand_category_hints = {
            'ECOFLOW': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
            'HOMEPRO': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',  # Default for HomePro brand
            'PETUS': '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á',
            'LOVER HANDS': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            'lifree': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            'coleman': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô'
        }
        
        # Product name keywords to category mapping
        self.keyword_category_mapping = {
            '‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü': '‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü',
            '‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü': '‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü',
            '‡∏™‡∏µ': '‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏™‡∏µ',
            '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥': '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥',
            '‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß': '‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
            '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
            '‡∏ó‡∏µ‡∏ß‡∏µ': '‡∏ó‡∏µ‡∏ß‡∏µ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏Å‡∏°',
            '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
            '‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
            '‡πÇ‡∏ã‡∏ü‡∏≤': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
            '‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏±‡∏ö': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            '‡∏Å‡∏•‡πà‡∏≠‡∏á': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            '‡∏ñ‡∏∏‡∏á': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            'POWER BOX': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
            'CANVAS SLING': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
            'COMFORT SOFA': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô'
        }
    
    def extract_category_from_url(self, url: str) -> Optional[str]:
        """Extract category from URL pattern"""
        if not url:
            return None
        
        # Look for category code in URL (e.g., /c/LIG)
        match = re.search(r'/c/([A-Z]{3})', url)
        if match:
            category_code = match.group(1)
            return self.category_mapping.get(category_code)
        
        return None
    
    def infer_category_from_brand(self, brand: str) -> Optional[str]:
        """Infer category from brand"""
        if not brand:
            return None
        
        brand = brand.strip().upper()
        for brand_hint, category in self.brand_category_hints.items():
            if brand_hint.upper() in brand:
                return category
        
        return None
    
    def infer_category_from_name(self, name: str) -> Optional[str]:
        """Infer category from product name keywords"""
        if not name:
            return None
        
        name_upper = name.upper()
        for keyword, category in self.keyword_category_mapping.items():
            if keyword.upper() in name_upper:
                return category
        
        return None
    
    def determine_category(self, product: dict) -> Optional[str]:
        """Determine category using multiple methods"""
        # Method 1: URL-based extraction
        category = self.extract_category_from_url(product.get('url', ''))
        if category:
            return category
        
        # Method 2: Brand-based inference
        category = self.infer_category_from_brand(product.get('brand', ''))
        if category:
            return category
        
        # Method 3: Name-based inference
        category = self.infer_category_from_name(product.get('name', ''))
        if category:
            return category
        
        return None
    
    async def fix_categories(self):
        """Fix categories for all products"""
        print("üîß Starting category fixing process...")
        
        try:
            # Get all products without category or with empty category
            result = self.supabase.client.table('products').select('*').or_('category.is.null,category.eq.').execute()
            products = result.data
            
            if not products:
                print("No products need category fixing")
                return
            
            print(f"Found {len(products)} products without categories")
            
            fixed_count = 0
            
            for product in products:
                category = self.determine_category(product)
                
                if category:
                    try:
                        self.supabase.client.table('products').update({
                            'category': category
                        }).eq('id', product['id']).execute()
                        
                        fixed_count += 1
                        print(f"‚úÖ Fixed category for {product['sku']}: {category}")
                    except Exception as e:
                        print(f"‚ùå Failed to update category for {product['sku']}: {str(e)}")
                else:
                    print(f"‚ö†Ô∏è  Could not determine category for {product['sku']} - {product.get('name', '')[:50]}...")
            
            print(f"\nüéâ Category fixing completed! Fixed {fixed_count} out of {len(products)} products")
            
        except Exception as e:
            print(f"‚ùå Category fixing failed: {str(e)}")

async def main():
    """Main function"""
    fixer = CategoryFixer()
    await fixer.fix_categories()

if __name__ == "__main__":
    asyncio.run(main())