#!/usr/bin/env python3
"""
Migrate existing product data to fix category and availability fields
"""
import asyncio
import sys
import re
from pathlib import Path
from typing import Optional

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from app.services.supabase_service import SupabaseService

class ProductDataMigrator:
    """Migrate and fix product data"""
    
    def __init__(self):
        self.supabase = SupabaseService()
        
        # Category mapping from URL patterns
        self.category_mapping = {
            'LIG': '‡πÇ‡∏Ñ‡∏°‡πÑ‡∏ü‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü',
            'PAI': '‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏≤‡∏™‡∏µ', 
            'BAT': '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥',
            'PLU': '‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏õ‡∏≤',
            'KIT': '‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
            'SMA': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å',
            'HHP': '‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
            'TVA': '‡∏ó‡∏µ‡∏ß‡∏µ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏Å‡∏°',
            'FLO': '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏õ‡∏π‡∏û‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏ô‡∏±‡∏á',
            'FUR': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
            'APP': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
            'CON': '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á',
            'ELT': '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
            'DOW': '‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á',
            'TOO': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå',
            'OUT': '‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏ô',
            'BED': '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≠‡∏ô',
            'SPO': '‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á',
            'BEA': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß',
            'MOM': '‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å',
            'HEA': '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
            'PET': '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á',
            'ATM': '‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå'
        }
    
    def extract_category_from_url(self, url: str) -> Optional[str]:
        """Extract category from URL pattern"""
        if not url:
            return None
        
        # Look for category code in URL (e.g., /c/LIG)
        match = re.search(r'/c/([A-Z]{3})', url)
        if match:
            category_code = match.group(1)
            return self.category_mapping.get(category_code, category_code)
        
        return None
    
    def infer_availability(self, product_data: dict) -> str:
        """Infer availability status from product data"""
        # If product has a current price, assume it's available
        if product_data.get('current_price'):
            return "in_stock"
        
        # If it has an original price but no current price, might be out of stock
        if product_data.get('original_price') and not product_data.get('current_price'):
            return "out_of_stock"
        
        return "unknown"
    
    async def migrate_products(self):
        """Migrate all products to fix category and availability"""
        print("üîÑ Starting product data migration...")
        
        # Get all products
        try:
            result = self.supabase.client.table('products').select('*').execute()
            products = result.data
            
            if not products:
                print("No products found to migrate")
                return
            
            print(f"Found {len(products)} products to migrate")
            
            updated_count = 0
            
            for product in products:
                updates = {}
                
                # Fix category if missing or empty
                if not product.get('category') or product.get('category').strip() == '':
                    category = self.extract_category_from_url(product.get('url', ''))
                    if category:
                        updates['category'] = category
                
                # Fix availability if missing or unknown
                if not product.get('availability') or product.get('availability') == 'unknown':
                    availability = self.infer_availability(product)
                    updates['availability'] = availability
                
                # Update if we have changes
                if updates:
                    try:
                        self.supabase.client.table('products').update(updates).eq('id', product['id']).execute()
                        updated_count += 1
                        
                        print(f"‚úÖ Updated product {product['sku']}: {updates}")
                    except Exception as e:
                        print(f"‚ùå Failed to update product {product['sku']}: {str(e)}")
            
            print(f"\nüéâ Migration completed! Updated {updated_count} products")
            
        except Exception as e:
            print(f"‚ùå Migration failed: {str(e)}")

async def main():
    """Main migration function"""
    migrator = ProductDataMigrator()
    await migrator.migrate_products()

if __name__ == "__main__":
    asyncio.run(main())